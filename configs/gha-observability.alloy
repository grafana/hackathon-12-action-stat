/////////////////////////////////////////////////////////////
// METRIC NAMING CONVENTIONS
/////////////////////////////////////////////////////////////
// Source: JSON (Authoritative)
// - workflow.duration: Total workflow execution time
//   Calculated as: (updatedAt - createdAt) for completed workflows
//   or (current_time - startedAt) for running workflows
// - workflow.job.duration: Job execution time
//   Calculated as: (completed_at - started_at) for completed jobs
//   or (current_time - started_at) for running jobs
// - workflow.step.duration: Step execution time
//   Calculated as: (completed_at - started_at) for completed steps
//   or (current_time - started_at) for running steps
// - workflow.status: Current workflow status
// - workflow.conclusion: Workflow conclusion
// - workflow.job.status: Job status
// - workflow.step.status: Step status

/////////////////////////////////////////////////////////////
// RECEIVERS
/////////////////////////////////////////////////////////////

// File log receiver for GitHub Actions workflow logs
otelcol.receiver.filelog "github_actions_logs" {
  include = [string.format("%s/*.log", env("LOGS_DIRECTORY"))]
  start_at = "beginning"
  delete_after_read = true
  
  resource = {
    "service.name" = "github_actions",
    "service.namespace" = env("GITHUB_REPOSITORY"),
    "workflow.name" = env("WORKFLOW_NAME"),
    "workflow.run_id" = env("WORKFLOW_RUN_ID"),
    "source" = "github_actions",
    "metric.source" = "logs",
  }

  operators = [
    // Parse job and step information from filename
    {
      type = "regex_parser",
      parse_from = "attributes[\"log.file.name\"]",
      regex = "^job-(?P<job_id>[0-9]+)(?:-step-(?P<step_number>[0-9]+))?\\.log$",
      on_error = "drop",
    },
    // Parse log line format
    {
      type = "regex_parser",
      parse_from = "body",
      regex = "^(?:(?P<job_name>[^\\t]+)\\t(?P<step_name>[^\\t]+)\\t)?(?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]+Z).*$",
      on_error = "drop",
    },
    // Parse timestamp
    {
      type = "time_parser",
      parse_from = "attributes.timestamp",
      layout_type = "strptime",
      layout = "%Y-%m-%dT%H:%M:%S.%fZ",
      on_error = "drop",
    },
  ]

  output {
    logs = [otelcol.processor.batch.github_actions_batch.input]
  }
}

// File log receiver for workflow metrics
otelcol.receiver.filelog "github_actions_metrics" {
  include = [string.format("%s/*.log", env("METRICS_DIRECTORY"))]
  start_at = "beginning"
  delete_after_read = true
  
  resource = {
    "service.name" = "github_actions",
    "service.namespace" = env("GITHUB_REPOSITORY"),
    "workflow.name" = env("WORKFLOW_NAME"),
    "workflow.run_id" = env("WORKFLOW_RUN_ID"),
    "source" = "github_actions",
    "metric.source" = "json",
  }

  operators = [
    // First parse the entire body as JSON
    {
      type = "json_parser",
      parse_from = "body",
      parse_to = "attributes",
    },
    // Then parse timestamp from the now-available attributes
    {
      type = "time_parser",
      parse_from = "attributes.createdAt",
      layout_type = "layout",
      layout = "2006-01-02T15:04:05Z",
    },
    // Workflow level attributes
    {
      type = "move",
      from = "attributes.workflowName",
      to = "attributes.workflow.name",
    },
    {
      type = "move",
      from = "attributes.workflowDatabaseId",
      to = "attributes.workflow.id",
    },
    {
      type = "move",
      from = "attributes.databaseId",
      to = "attributes.run.id",
    },
    {
      type = "move",
      from = "attributes.status",
      to = "attributes.run.status",
    },
    {
      type = "move",
      from = "attributes.conclusion",
      to = "attributes.run.conclusion",
    },
    {
      type = "move",
      from = "attributes.duration",
      to = "attributes.workflow.duration",
    },
    // Job level attributes
    {
      type = "copy",
      from = "attributes.jobs[\"*\"].name",
      to = "attributes.workflow.job.name",
    },
    {
      type = "copy",
      from = "attributes.jobs[\"*\"].status",
      to = "attributes.workflow.job.status",
    },
    {
      type = "copy",
      from = "attributes.jobs[\"*\"].duration",
      to = "attributes.workflow.job.duration",
    },
    // Step level attributes
    {
      type = "copy",
      from = "attributes.jobs[\"*\"].steps[\"*\"].name",
      to = "attributes.workflow.step.name",
    },
    {
      type = "copy",
      from = "attributes.jobs[\"*\"].steps[\"*\"].status",
      to = "attributes.workflow.step.status",
    },
    {
      type = "copy",
      from = "attributes.jobs[\"*\"].steps[\"*\"].duration",
      to = "attributes.workflow.step.duration",
    },
  ]

  output {
    metrics = [otelcol.exporter.otlphttp.destination.input]
  }
}

/////////////////////////////////////////////////////////////
// PROCESSORS
/////////////////////////////////////////////////////////////

// Batch processor for better performance
otelcol.processor.batch "github_actions_batch" {
  timeout = "1s"
  send_batch_size = 1024

  output {
    logs = [otelcol.processor.transform.github_actions_transform.input]
  }
}

// Transform processor to standardize attributes and convert to metrics
otelcol.processor.transform "github_actions_transform" {
  error_mode = "ignore"
  
  log_statements {
    context = "log"
    statements = [
      // Ensure consistent attribute naming for job fields (always present)
      "set(attributes[\"workflow.job.name\"], attributes[\"job_name\"]) where attributes[\"job_name\"] != nil",
      "set(attributes[\"workflow.job.id\"], attributes[\"job_id\"]) where attributes[\"job_id\"] != nil",
      // Only set step fields if they exist
      "set(attributes[\"workflow.step.name\"], attributes[\"step_name\"]) where attributes[\"step_name\"] != nil and attributes[\"step_name\"] != \"\"",
      "set(attributes[\"workflow.step.id\"], attributes[\"step_number\"]) where attributes[\"step_number\"] != nil and attributes[\"step_number\"] != \"\"",
      // Track timestamps for duration calculation
      "set(attributes[\"start_time\"], timestamp) where body matches \".*started.*\"",
      "set(attributes[\"end_time\"], timestamp) where body matches \".*completed.*\"",
      // Add metric source
      "set(attributes[\"metric.source\"], \"logs\")",
      // Calculate durations when we have both timestamps
      "set(attributes[\"duration\"], unix_nano(end_time) - unix_nano(start_time)) where start_time != nil and end_time != nil",
      // Map status values
      "set(attributes[\"status_value\"], 1) where body matches \".*completed successfully.*\"",
      "set(attributes[\"status_value\"], 0) where body matches \".*failed.*\"",
      // Clean up temporary attributes
      "delete_key(attributes, \"job_name\")",
      "delete_key(attributes, \"step_name\") where attributes[\"step_name\"] != nil",
      "delete_key(attributes, \"job_id\")",
      "delete_key(attributes, \"step_number\") where attributes[\"step_number\"] != nil",
      "delete_key(attributes, \"timestamp\")",
    ]
  }

  metric_statements {
    context = "datapoint"
    statements = [
      // Duration metrics (convert from nano to seconds)
      "set(metric.name, \"workflow.duration\") where attributes[\"duration\"] != nil and attributes[\"workflow.name\"] != nil",
      "set(metric.value, attributes[\"duration\"] / 1e9) where metric.name == \"workflow.duration\"",
      "set(metric.name, \"workflow.job.duration\") where attributes[\"duration\"] != nil and attributes[\"workflow.job.name\"] != nil",
      "set(metric.value, attributes[\"duration\"] / 1e9) where metric.name == \"workflow.job.duration\"",
      "set(metric.name, \"workflow.step.duration\") where attributes[\"duration\"] != nil and attributes[\"workflow.step.name\"] != nil",
      "set(metric.value, attributes[\"duration\"] / 1e9) where metric.name == \"workflow.step.duration\"",
      // Status metrics
      "set(metric.name, \"workflow.status\") where attributes[\"workflow.status\"] != nil",
      "set(metric.value, attributes[\"status_value\"]) where metric.name == \"workflow.status\"",
      "set(metric.name, \"workflow.conclusion\") where attributes[\"workflow.conclusion\"] != nil",
      "set(metric.value, attributes[\"status_value\"]) where metric.name == \"workflow.conclusion\"",
      "set(metric.name, \"workflow.job.status\") where attributes[\"workflow.job.status\"] != nil",
      "set(metric.value, attributes[\"status_value\"]) where metric.name == \"workflow.job.status\"",
      "set(metric.name, \"workflow.step.status\") where attributes[\"workflow.step.status\"] != nil",
      "set(metric.value, attributes[\"status_value\"]) where metric.name == \"workflow.step.status\"",
      // Set units for duration metrics
      "set(metric.unit, \"s\") where contains(metric.name, \"duration\")",
      // Set descriptions
      "set(metric.description, \"Duration of workflow execution\") where metric.name == \"workflow.duration\"",
      "set(metric.description, \"Duration of job execution\") where metric.name == \"workflow.job.duration\"",
      "set(metric.description, \"Duration of step execution\") where metric.name == \"workflow.step.duration\"",
      "set(metric.description, \"Current workflow status (1=success, 0=failure)\") where metric.name == \"workflow.status\"",
      "set(metric.description, \"Workflow conclusion (1=success, 0=failure)\") where metric.name == \"workflow.conclusion\"",
      "set(metric.description, \"Current job status (1=success, 0=failure)\") where metric.name == \"workflow.job.status\"",
      "set(metric.description, \"Current step status (1=success, 0=failure)\") where metric.name == \"workflow.step.status\"",
    ]
  }

  output {
    metrics = [otelcol.exporter.otlphttp.destination.input]
  }
}

/////////////////////////////////////////////////////////////
// EXPORTERS
/////////////////////////////////////////////////////////////

// Common exporter configuration
otelcol.exporter.otlphttp "destination" {
  client {
    endpoint = env("TELEMETRY_URL")
    auth = otelcol.auth.basic.destination.handler
  }
}

otelcol.auth.basic "destination" {
  username = env("TELEMETRY_USERNAME")
  password = env("TELEMETRY_PASSWORD")
} 
