otelcol.receiver.filelog "run_log" {
  include = [string.format("%s/job-*-step-*.log", sys.env("LOG_DIRECTORY"))]
  start_at = "beginning"
  delete_after_read = true
  include_file_name = true
  include_file_path = false
  include_file_name_resolved = false
  include_file_path_resolved = false

  resource = {
    "repository.name" = sys.env("GITHUB_REPOSITORY"),
    "workflow.name" = sys.env("WORKFLOW_NAME"),
    "workflow.run_id" = sys.env("WORKFLOW_RUN_ID"),
    "service_name" = "github_actions",
  }

  operators = [
    {
      type       = "regex_parser",
      parse_from = "attributes[\"log.file.name\"]",
      regex      = "^job-(?P<job_id>[0-9]+)-step-(?P<step_id>[0-9]+)\\.log$",
      on_error   = "drop",
    },
    {
      type       = "regex_parser",
      parse_from = "body",
      regex      = "^(?P<job_name>[^\\t]+)\\t(?P<step_name>[^\\t]+)\\t(?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{7}Z).*$",
      on_error   = "drop",
    },
    {
      type        = "time_parser",
      parse_from  = "attributes.timestamp",
      layout_type = "strptime",
      layout      = "%Y-%m-%dT%H:%M:%S.%fZ",
      on_error    = "drop",
    },
  ]

  output {
    logs = [
      otelcol.exporter.otlphttp.destination.input,
    ]
  }
}

otelcol.exporter.otlphttp "destination" {
  client {
    endpoint = sys.env("TELEMETRY_URL")
    auth = otelcol.auth.basic.destination.handler
  }
}

otelcol.auth.basic "destination" {
  username = sys.env("TELEMETRY_USERNAME")
  password = sys.env("TELEMETRY_PASSWORD")
}
